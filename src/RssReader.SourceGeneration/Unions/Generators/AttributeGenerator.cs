namespace RssReader.SourceGeneration.Unions.Generators;

internal static class AttributeGenerator
{
    public static void AddGenerateUnionAttribute(this IncrementalGeneratorInitializationContext context, int arity)
    {
        if (arity < 1)
        {
            throw new ArgumentException("Arity must be at least 1.", nameof(arity));
        }

        var typeNames = Enumerable.Range(0, arity).Select(a => $"T{a}").ToArray();

        var builder = new StringBuilder();

        builder.Append(
            $$"""
            // <auto-generated/>
            
            #nullable enable
            
            namespace {{Constants.PublicNamespace}};
            
            [global::System.AttributeUsage(global::System.AttributeTargets.Struct, AllowMultiple = false)]
            public sealed class {{Constants.AttributeName}}{{Helper.GetGenericSuffix(typeNames)}} : global::System.Attribute
            """);

        foreach (var typeName in typeNames)
        {
            builder.Append(
                $$"""

                    where {{typeName}} : notnull
                """);
        }

        builder.AppendLine(
            $$"""
            {
                public bool {{Constants.AttributeGenerateJsonConverterPropertyName}} { get; set; } = false;
            }
            """);

        context.RegisterPostInitializationOutput(
            ctx => ctx.AddSource(
                $"{Constants.AttributeName}{arity}.g.cs",
                SourceText.From(builder.ToString(),
                Encoding.UTF8)));
    }
}
