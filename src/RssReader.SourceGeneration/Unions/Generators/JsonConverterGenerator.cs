namespace RssReader.SourceGeneration.Unions.Generators;

internal static class JsonConverterGenerator
{
    public static string GetJsonConverterName(this StructInfo structInfo) => $"{structInfo.GetNormalizedTypeName()}_JsonConverter";

    public static string GetJsonConverterFactoryName(this StructInfo structInfo) => $"{structInfo.GetNormalizedTypeName()}_JsonConverterFactory";

    public static void AddUnionJsonConverter(this SourceProductionContext context, StructInfo structInfo)
    {
        var genericSuffix = structInfo.GetGenericSuffix();
        var genericOpenSuffix = structInfo.GetOpenGenericSuffix();

        var structName = $"global::{structInfo.Namespace}.{structInfo.Name}";
        var converterName = structInfo.GetJsonConverterName();
        var converterFactoryName = structInfo.GetJsonConverterFactoryName();

        var builder = new StringBuilder();

        builder.AppendLine(
            $$"""
            // <auto-generated/>
            
            #nullable enable
        
            """);

        builder.AppendLine(
            $$"""
            namespace {{Constants.OutputNamespace}};

            """);

        if (structInfo.IsGeneric)
        {
            builder.AppendLine(
                $$"""                
                public sealed class {{converterFactoryName}} : global::System.Text.Json.Serialization.JsonConverterFactory
                {
                    private static readonly Type _structType = typeof({{structName}}{{genericOpenSuffix}});
                    private static readonly Type _converterType = typeof({{converterName}}{{genericOpenSuffix}});

                    public override bool CanConvert(global::System.Type typeToConvert)
                    {
                        return typeToConvert.IsGenericType && typeToConvert.GetGenericTypeDefinition() == _structType;
                    }

                    public override global::System.Text.Json.Serialization.JsonConverter CreateConverter(global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                    {
                        var converterType = _converterType.MakeGenericType(typeToConvert.GenericTypeArguments);
                        return (global::System.Text.Json.Serialization.JsonConverter)global::System.Activator.CreateInstance(converterType)!;
                    }
                }

                """);
        }


        builder.AppendLine(
            $$"""
            public sealed class {{converterName}}{{genericSuffix}} : global::System.Text.Json.Serialization.JsonConverter<{{structName}}{{genericSuffix}}>
            {
                public override {{structName}}{{genericSuffix}} Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                {
                    if (reader.TokenType is not global::System.Text.Json.JsonTokenType.StartObject
                        || !reader.Read())
                    {
                        throw new global::System.Text.Json.JsonException("Expected StartObject token.");
                    }

                    if (!reader.ValueTextEquals("typeIndex")
                        || !reader.Read())
                    {
                        throw new global::System.Text.Json.JsonException("Expected typeIndex property.");
                    }

                    if (!reader.TryGetByte(out byte typeIndex)
                        || !reader.Read())
                    {
                        throw new global::System.Text.Json.JsonException("Expected typeIndex to be a byte.");
                    }

                    if (!reader.ValueTextEquals("value")
                        || !reader.Read())
                    {
                        throw new global::System.Text.Json.JsonException("Expected value property.");
                    }

                    var result = typeIndex switch
                    {
            """);

        foreach (var t in structInfo.Types)
        {
            if (t.IsValueType)
            {
                builder.AppendLine(
                    $$"""
                                {{t.Index}} => new {{structName}}{{genericSuffix}}(global::System.Text.Json.JsonSerializer.Deserialize<{{t.TypeName}}>(ref reader, options)),
                    """);
            }
            else
            {
                builder.AppendLine(
                    $$"""
                                {{t.Index}} => new {{structName}}{{genericSuffix}}(
                                    global::System.Text.Json.JsonSerializer.Deserialize<{{t.TypeName}}>(ref reader, options)
                                        ?? throw new global::System.Text.Json.JsonException($"Failed to deserialize {{t.TypeName}} with type index {typeIndex}")),
                    """);
            }
        }

        builder.AppendLine(
            $$"""
                        _ => throw new global::System.Text.Json.JsonException($"Invalid type index: {typeIndex}")
                    };
            
                    while (reader.Read());
            
                    return result;
                }

            """);

        builder.AppendLine(
            $$"""
                public override void Write(global::System.Text.Json.Utf8JsonWriter writer, {{structName}}{{genericSuffix}} value, global::System.Text.Json.JsonSerializerOptions options)
                {
                    writer.WriteStartObject();
                    writer.WriteNumber("typeIndex", value.TypeIndex);
                    writer.WritePropertyName("value");

                    value.Switch(
            {{string.Join(",\n", structInfo.Types.Select(t => $$"""                t{{t.Index}} => global::System.Text.Json.JsonSerializer.Serialize(writer, t{{t.Index}}, options)"""))}});

                    writer.WriteEndObject();
                }
            }

            """);

        context.AddSource(
            $"{structInfo.Namespace}.{structInfo.GetNormalizedTypeName()}.JsonConverter.g.cs",
            SourceText.From(builder.ToString(), Encoding.UTF8));
    }
}
